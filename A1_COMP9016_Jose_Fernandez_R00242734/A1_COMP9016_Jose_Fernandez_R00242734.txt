1.1 BUILDING YOUR WORLD
Create a 2D world that will play host to a game to be played by your agent types. Provide
context for the mechanics of the world and the conditions under which the game is complete.
The intent of this exercise is for you to demonstrate your understanding of how a problem can
be modeled abstractly. To this end, provide a well a defined task environment, implement
three different agent types and provide a PEAS description for each.
• Critique the advantages and disadvantages of each agent type.
• Demonstrate each agents ability to perform or under-perform in the 2-dimensional
world.
• Discuss, and evaluate, the agents suitability to operate in world of varying sizes.


The solution should be implemented in Python, you may use any of the libraries made available from the AIMA python repository but they must be clearly referenced (see note on importing code under submission), you will be graded on your contribution and this should be
clearly highlighted.
Write a clear and concise description of the agent-based world. The purpose of this is to
articulate an understanding of the underlying concepts being implemented both from a theoretical and practical perspective.






1.2 SEARCHING YOUR WORLD
• Formulate a well defined problem statement and identify a goal-state under which
your game is complete. Why is this important to search? As part of your solution you
should be including the initial state, the set of actions, the transition model, a goal test
function and a path cost function.
• Select three uninformed search techniques and discuss their appropriateness to your
world under appropriate headings for evaluating problem-solving performance. 
Implement the uninformed search techniques and discuss the results.
• Select three informed search techniques and discuss their appropriateness to your
world under appropriate headings for evaluating problem-solving performance. 
Implement the informed search techniques and discuss the results.
Write a clear and concise report detailing the search techniques performance in your 
agentbased game for the relevant agent types. The purpose of this is to articulate an understanding
of the underlying concepts, and limitations, being implemented both from a theoretical and
practical perspective


2 TIPS
• Tip for Part 1: Review “agents.ipynb” and Chapter 2 of the recommended text. Do not
overthink this, start fast and fail faster, define your task environment, outline your PEAS
for the three agent tpyes. You can start with basic environments first and iteratively
increase the complexity of the mechanics of the world - just be sure to do so.
• Tip for Part 2: Review “search.ipynb” and Chapter 3 and 4 of the recommended text.
• Tip for all Parts: Do not provide masses of text lifted from the text/online or wikipedia.
Be your own editor, focus on what is important and articulate that in a rationale way
that is technically accurate. Demonstrating a capacity to explain complex topics in a
clear and concise manner is indicative of a higher level of understanding and will be
rewarded with an appropriate grade. Use results derived from experimental runs to
back your claims and make sure your narrative is coherent and consistent.


3 SUBMISSION
You submission will contain:
• A 1500 word report ≤ 7 pages in “.pdf” format.
• A single “.py’ file
Prepare your submission by archiving it as a single “.zip” file using the following naming convention.



3.1 WORD COUNT - 1500 WORD MAX
There are two distinct questions as part of this assignment Q1.1-Q1.2. In answering these it
is important that you demonstrate an understanding of the underlying theory as applied in
the context of your environment. There is a suggested word limit of 750 words per question, 
your ability to articulate your answer succinctly is indicative of a deeper understanding
in itself. I highly recommend the use of well formatted tables for any experimental results
and/or diagrams/visualisations if they aid the message you are trying to convey. Boilerplate
text articulating “what an agent is” and “what a search algorithm is” should be kept succinct
and to the point.
Prepare your solution by the due date as a single “.pdf” file using the following naming convention.

3.2 CODE SUBMISSION
A single “.py’ file should be prepared containing all code for questions 1.1-1.2. Encapsulate
these in two individual functions called from the end of your submitted “.py” file. 

NB: Assume the base directory of the AIMA repo is available from the parent directory (see Fig. 3.1
for importing modules). Your code will be run from a “subdir” of the AIMA libraries - I expect
you to follow these guidelines.

Prepare your solution by the due date as a single “.py” file using the following naming convention.

